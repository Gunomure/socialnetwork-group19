#default image unless otherwise specified
image: maven:3.8.3-jdk-11

variables:
  MAVEN_LOCAL_REPOSITORY: "-Dmaven.repo.local=./.m2/repository"
  POSTGRES_CONTAINER_STATUS: $(docker container inspect -f {{.State.Status}} $POSTGRES_CONTAINER_NAME)
  BACKEND_CONTAINER_STATUS: $(docker container inspect -f {{.State.Status}} $BACK_CONTAINER_NAME)

stages:
  - build
  - test
  - package
  - deploy_dockerhub
  - deploy_prod
  - notify #implement notify via telegram bot

build:
  stage: build
  only:
    - develop
    - merge_requests
  except:
    - tags
  script:
    - mvn $MAVEN_LOCAL_REPOSITORY clean compile
  cache:
    paths:
      - ./impl/target
      - ./domain/target
      - ./.m2

# makes the stage hidden
.test:
  stage: test
  only:
    - develop
    - merge_requests
  except:
    - tags
  script:
    - mvn $MAVEN_LOCAL_REPOSITORY test
  cache:
    paths:
      - ./target
      - ./.m2

package:
  stage: package
  only:
    - develop
    - main
  except:
    - tags
  script:
    - mvn $MAVEN_LOCAL_REPOSITORY package -Dmaven.test.skip=true
  artifacts:
    paths:
      - impl/target/*.jar
  cache:
#    policy: pull
    paths:
      - ./impl/target
      - ./domain/target
      - ./.m2

build_and_push_image:
  image: docker:latest
  stage: deploy_dockerhub
  only:
    - develop
    - main
  except:
    - tags
  before_script:
    - docker logout
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
  script:
    - docker build -f impl/Dockerfile --platform linux/arm64/v8 -t $BACK_IMAGE .
    - docker push $BACK_IMAGE
  artifacts:
    paths:
      - impl/target/*.jar

deploy_prod_server:
  stage: deploy_prod
  only:
    - develop
    - main
  except:
    - tags
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PROD_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # TODO move default and backend-deployment to ci/cd variables
    - ssh $PROD_USER@$PROD_HOST "kubectl rollout restart -n $NAMESPACE deployment backend-deployment"

#================================================================
#===========RUN FOR DEVELOPMENT DEPLOY===========================
#================================================================
package_dev:
  stage: package
  environment: development
  only:
    - merge_requests
  except:
    - tags
  script:
    - mvn $MAVEN_LOCAL_REPOSITORY package -Dmaven.test.skip=true
  artifacts:
    paths:
      - impl/target/*.jar
  cache:
    policy: pull
    paths:
      - ./impl/target
      - ./domain/target
      - ./.m2

# TODO update it after creating namespace

build_and_push_image_dev:
  image: docker:latest
  stage: deploy_dockerhub
  when: manual
  environment: development
  only:
    - merge_requests
  except:
    - tags
  before_script:
    - docker logout
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
  script:
    - docker build -f impl/Dockerfile --platform linux/arm64/v8 -t $BACK_IMAGE .
    - docker push $BACK_IMAGE
  artifacts:
    paths:
      - impl/target/*.jar

deploy_development:
  stage: deploy_prod
  only:
    - merge_requests
  when: manual
  environment: development
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PROD_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $PROD_USER@$PROD_HOST "kubectl rollout restart -n $NAMESPACE deployment backend-deployment"